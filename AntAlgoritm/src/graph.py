class Graph:
    def __init__(self):
        """
        Инициализирует объект графа.
        graph: Словарь, где ключи — узлы, а значения — списки соседей в формате (сосед, вес ребра).
        pheromone: Словарь, где ключи — пары узлов (u, v), а значения — уровень феромонов на ребре.
        """
        self.graph = {}  # Хранит структуру графа
        self.pheromone = {}  # Хранит уровень феромонов для каждого ребра

    def add_edge(self, u, v, weight):
        """
        Добавляет ребро между узлами u и v с указанным весом.
        Если узлы не существуют в графе, они создаются.

        Параметры:
        u (int/str): Узел-источник.
        v (int/str): Узел-назначение.
        weight (float): Вес ребра (расстояние между узлами).
        """
        # Если узел u отсутствует в графе, создаем для него пустой список соседей
        if u not in self.graph:
            self.graph[u] = []
        # Если узел v отсутствует в графе, создаем для него пустой список соседей
        if v not in self.graph:
            self.graph[v] = []

        # Добавляем ребро (v, weight) к списку соседей узла u
        self.graph[u].append((v, weight))
        # Если граф симметричный (обратный путь тоже возможен)
        # self.graph[v].append((u, weight))

        # Устанавливаем начальный уровень феромонов на ребре (u, v) и (v, u), если их еще нет
        if (u, v) not in self.pheromone:
            self.pheromone[(u, v)] = 1.0  # Начальный уровень феромонов
        # if (v, u) not in self.pheromone:
        #     self.pheromone[(v, u)] = (
        #         1.0  # Начальный уровень феромонов (для симметричного графа)
        #     )

    def get_neighbors(self, node):
        """
        Возвращает список соседей для указанного узла.

        Параметры:
        node (int/str): Узел, для которого необходимо получить список соседей.

        Возвращает:
        list[tuple]: Список соседей в формате (сосед, вес ребра).
        """
        return self.graph[node]
